<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReactiveX on Rocko&#39;s blog</title>
    <link>https://rocko.vip/tags/reactivex/</link>
    <description>Recent content in ReactiveX on Rocko&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rocko.vip/tags/reactivex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【译】NotRxJava懒人专用指南</title>
      <link>https://rocko.vip/posts/%E8%AF%91notrxjava%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      <guid>https://rocko.vip/posts/%E8%AF%91notrxjava%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;原文链接 : &lt;a href=&#34;http://yarikx.github.io/NotRxJava/&#34;&gt;NotRxJava guide for lazy folks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;原文作者 : &lt;a href=&#34;http://yarikx.github.io/&#34;&gt;Yaroslav Heriatovych&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;译文出自 : &lt;a href=&#34;http://www.devtf.cn/&#34;&gt;开发技术前线 www.devtf.cn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;译者 : &lt;a href=&#34;https://github.com/zhengxiaopeng&#34;&gt;Rocko&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;校对者: &lt;a href=&#34;https://github.com/bboyfeiyu&#34;&gt;Mr.Simple&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;状态 : 完成校对&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你是一位 Android 开发者，那么这些天你可能已经听到或看到一些关于 RxJava 满天飞的宣传了。RxJava 是一个能让你摆脱编写一些复杂繁琐的代码去处理异步事件的库。一旦开始在你的项目中使用，你会对它爱不释手的。&lt;/p&gt;&#xA;&lt;p&gt;然而，RxJava 有个缺陷，它需要一个陡峭的学习过程。对于一个从未接触使用过 RxJava 的人来说，是很难一次就领会到它的精髓所在的，对于它的一些使用方法你也可能会很迷惑。在项目中使用它意味着你需要稍微地改变一下你的代码编写思路，另外，这样的学习曲线会使得在项目中因为大规模的使用RxJava而引发一些问题。&lt;/p&gt;&#xA;&lt;p&gt;当然，关于如何去使用 RxJava 已经有许多的教程和代码范例了。感兴趣的开发者可以访问 RxJava 的官方 Wiki，里面有关于什么是 Observable 以及它和 Iterable、Future 之间关系的很好的解释。Wiki 里有一篇很有用的文章：How To Use RxJava，这篇文章包含怎么去发送事件流并且打印出它们的介绍以及它的样例代码。&lt;/p&gt;&#xA;&lt;p&gt;但我们要明确的是在还没有学习什么是 Observable 的前提下了解 RxJava 用来解决什么问题以及它是怎么帮助我们组织起异步代码的。&lt;/p&gt;&#xA;&lt;p&gt;我这篇文章的定位就是 RxJava 官方文档的“前篇”，读完这篇文章能更好地去理解 RxJava 所解决的问题。文章中也有一个小 Demo，就是自己怎么去整理那些凌乱的代码，然后看看我们在没有使用 RxJava 的情况下是怎么去遵循 RxJava 基本原则的。&lt;/p&gt;&#xA;&lt;p&gt;所以，如果你仍有足够的好奇的话就让我们开始吧！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
